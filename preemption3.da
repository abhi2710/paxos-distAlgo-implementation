import sys
from random import randint
TIMEOUT = 2
class Proposer(process):
    def setup(acceptors:set,r:float,tp:int):
        self.n = None                           # proposal number
        self.pnum = None                        # preempted proposed number
        self.numPreempted = 0                   # Number of preempted values
        self.majority = acceptors               # majority of acceptors; all in other papers



    def to_consent():

        n = (0, self) if n == None else (n[0]+1, self)  # pick a prop num


        if pnum != None:                                                                  #IF PREEMPTED NUMBER EXISTS
            if pnum[0] > n[0]:                                                            #IF PREEMPTED NUMBER IS GREATER THAN INTERNAL PROPOSAL NUMBER
                n = (pnum[0]+1, self)                                                     #UPDATE PROPOSAL NUMBER =  preempted number +1
                self.numPreempted+=1
                output(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>new n ->",n,pnum,"<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<")

        send(('prepare', n), to= majority)

        if await(len(setof(a, received(('respond', _n, _), from_ =a)))
                 > len(acceptors)/2):

            v = anyof(setof(v, received(('respond', _n, (n2, v))),
                            n2==max(setof(n2, received(('respond', _n, (n2, _))))))
                      or {randint(1,100)})              # any value, pick in 1..100

            responded = setof(a, received(('respond', _n, _), from_ =a))

            send(('proposed_values', v), to=nodeof(self))                               #COLLECTING ALL PROPOSED VALUES TO TEST CORRECTNESS

            send(('accept', n, v), to= responded)


        elif timeout(TIMEOUT):
            output('failed proposal number', n)


    def run():
        while not received(('done',)):
            to_consent()
        output('terminating')

    def receive(msg= ('preempt', n, s)):
        pnum=s[0]

    def anyof(s):
        return next(iter(s)) if s else None




class Acceptor(process):

    def setup(learners:set,r:float): pass


    def receive(msg= ('prepare', n), from_= p):
        if each(sent(('respond', n2, _)), has= n > n2):
            maxprop = anyof(setof((n, v), sent(('accepted', n, v)),
                               n==max(setof(n, sent(('accepted', n, _))))))
            send(('respond', n, maxprop), to =p)
        else :
            maxprop = anyof(setof((n, v), sent(('respond', n, v)),
                               n==max(setof(n, sent(('respond', n, _))))))
            if maxprop != None :
                send(('preempt', n, maxprop), to =p)                                #SEND PREEMPTED VALUE IF NOT RESPONDED




    def receive(msg= ('accept', n, v)):
        if not some(sent(('respond', n2, _)), has= n2 > n):
            send(('accepted', n, v), to= learners)



    def run():
        await(received(('done',)))
        output('terminating')


    def anyof(s):
        """return any element of set s if s is not empty or 'None' otherwise"""
        return next(iter(s)) if s else None


class Learner(process):

    def setup(acceptors:set,r:float,tl:int):
            self.accepted_proposal = None

    def learn():
        if await(some(received(('accepted', n, v)),
                      has= len(setof(a, received(('accepted', _n, _v), from_=a)))
                           > len(acceptors)/2)):
            output('learned', n, v)
            accepted_proposal = (n[1],v)
        elif timeout(TIMEOUT * 10):
            output('failed learning anything')

    def run():
        learn()
        output('terminating')
        send(('learned', ), to=nodeof(self))
        send(('chosen_proposal', accepted_proposal), to=nodeof(self))


def main():
    nacceptors = int(sys.argv[1]) if len(sys.argv) > 1 else 3
    nproposers = int(sys.argv[2]) if len(sys.argv) > 2 else 5
    nlearners = int(sys.argv[3]) if len(sys.argv) > 3 else 3

    acceptors = new(Acceptor, num= nacceptors)
    proposers = new(Proposer, (acceptors,), num= nproposers)
    learners = new(Learner, (acceptors,), num= nlearners)

    for p in acceptors: setup(p, (learners,))
    start(acceptors | proposers | learners)

    await(each(l in learners, has=received(('learned',), from_=l)))
    proposed_values_received=set()
    num_preempted=set()
    for proposer in proposers:
        proposed_values_received = proposed_values_received | setof(a, received(('proposed_values', a), from_=proposer))
        #num_preempted = num_preempted | setof(a, received(('num_preempted', a), from_=proposer))
    countLearners = 0
    correct=True
    v=set()
    for learner in learners:
        v = v | setof(a, received(('chosen_proposal', a), from_=learner))
        countLearners+=1
    if len(v) != 1:
        correct = False
    if countLearners != nlearners:
        correct = False
    if len(v)==1:
        k = next(iter(v))
        output("kkk",k,v)
        if  not k or k[1] not in proposed_values_received:
            correct = False

    output("vv=========<<<<<<<<<<<<<<<<<<",v,countLearners,nlearners,proposed_values_received,num_preempted,"sum numpreempted",sum(num_preempted))
    output("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>")
    output("CORRECTNESS TEST: ","PASS" if correct else "FAIL")

    output('done')
    send(('done',), to= (acceptors|proposers))

# This is an executable specification of the algorithm described in
# Lamport, L. (2001).  Paxos Made Simple.  ACM SIGACT News
# (Distributed Computing Column), 32(4):51-58, December.
# This code includes setup and termination for running repeated rounds until
# the learners all terminate after learning the consent value or timeout.