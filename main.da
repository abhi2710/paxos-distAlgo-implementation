import sys
import random
import time
import orig3
import preemption3
codePaths=[orig3,preemption3]

class Driver(process):
    def setup(p,a,l,n,r,d,w,tp,tl):
        self.p=p
        self.a=a
        self.l=l
        self.n=n
        self.r=r
        self.d=d
        self.w=w
        self.tp=tp
        self.tl=tl


    def runPerformanceTests():

        for codePath in codePaths:
            for run in range(n):

                acceptors = new(codePath.Acceptor, num= a)
                proposers = new(codePath.Proposer, (acceptors,r,tp), num= p)
                learners = new(codePath.Learner, (acceptors,r,tl), num= l)
                for p in acceptors: setup(p, (learners,r))
                start(acceptors | proposers | learners)



    def run():

        runPerformanceTests()               #Performance Test
        output('terminating')
        send(('done', self), to= parent())
        await(received(('done'), from_=parent()))


def main():

    p = int(sys.argv[1]) if len(sys.argv) > 1 else 10           # num of proposers
    a = int(sys.argv[2]) if len(sys.argv) > 2 else 10           # num of acceptors
    l = int(sys.argv[3]) if len(sys.argv) > 3 else 10           # num of learners
    n = int(sys.argv[4]) if len(sys.argv) > 4 else 1            # num of runs
    r = float(sys.argv[5]) if len(sys.argv) > 5 else 0            # message loss rate
    d = int(sys.argv[6]) if len(sys.argv) > 6 else 1            # message delay
    w = int(sys.argv[7]) if len(sys.argv) > 7 else 1            # wait time
    tp = int(sys.argv[8]) if len(sys.argv) > 8 else 1           # timeout by proposers
    tl = int(sys.argv[9]) if len(sys.argv) > 9 else 1           # timeout by learners
    driver = new(Driver, num=1)
    setup(driver,(p,a,l,n,r,d,w,tp,tl))
    start(driver)
    await(received(('done', driver)))
    send(('done'), to=driver)