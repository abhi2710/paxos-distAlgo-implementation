import sys
import random
import time
import statistics
import orig3
import preemption3
codePaths=[preemption3,orig3]

class Driver(process):
    def setup(p,a,l,n,r,d,w,tp,tl):
        self.results={}


    def formatResults(results,varyingFunc):
        output("************************************************************************************")
        output("********************************Average CPU Time************************************")
        output("************************************************************************************")
        cpuOrig=[];cpuPrem=[]
        output( "{:<10} | {:<20} | {:<20} | {:<20}  | {:<20} ".format(varyingFunc,'orig3.da','preemption3.da','orig3 learned','preemption3 learned'))
        for i in results['orig3']:
            cpuOrigTime=round(results['orig3'][i]['cpuTime']/results['orig3'][i]['n'],4) if results['orig3'][i]['n'] > 0 else 0
            cpuPremTime=round(results['preemption3'][i]['cpuTime']/results['preemption3'][i]['n'],4) if results['preemption3'][i]['n'] > 0 else 0
            output( "{:<10} | {:<20} | {:<20} | {:<20}  | {:<20} ".format(i,
            cpuOrigTime if cpuOrigTime !=0 else "Failed",
            cpuPremTime if cpuPremTime !=0 else "Failed",
            str(results['orig3'][i]['n']) +"/" + str(results['orig3'][i]['total']),
            str(results['preemption3'][i]['n']) +"/" + str(results['preemption3'][i]['total'])
            ))
            if cpuOrigTime:
                cpuOrig.append(cpuOrigTime)
            if cpuPremTime:
                cpuPrem.append(cpuPremTime)

        output('\n')
        origStDev=round(statistics.stdev(cpuOrig),4) if len(cpuOrig)>1 else "-"
        PremStDev=round(statistics.stdev(cpuPrem),4) if len(cpuPrem)>1 else "-"
        output('Standard Deviation- Orig - ',origStDev)
        output('Standard Deviation- Preemtion - ',PremStDev)
        origMean=round(statistics.mean(cpuOrig),4) if len(cpuOrig)>0 else "-"
        PremMean=round(statistics.mean(cpuPrem),4) if len(cpuPrem)>0 else "-"
        output('Standard Deviation- Orig - ',origStDev)
        output('Standard Deviation- Preemtion - ',PremStDev)
        output('Mean- Orig - ',origMean)
        output('Mean- Preemtion - ',PremMean)
        output('\n')
        output('\n')
        output("************************************************************************************")
        output("********************************Average Elapsed Time********************************")
        output("************************************************************************************")
        cpuOrig=[];cpuPrem=[]
        output( "{:<10} | {:<20} | {:<20} | {:<20}  | {:<20} ".format(varyingFunc,'orig3.da','preemption3.da','orig3 learned','preemption3 learned'))
        for i in results['orig3']:
            cpuOrigTime=round(results['orig3'][i]['execTime']/results['orig3'][i]['n'],4) if results['orig3'][i]['n'] > 0 else 0
            cpuPremTime=round(results['preemption3'][i]['execTime']/results['preemption3'][i]['n'],4) if results['preemption3'][i]['n'] > 0 else 0
            output( "{:<10} | {:<20} | {:<20} | {:<20}  | {:<20} ".format(i,
            cpuOrigTime if cpuOrigTime !=0 else "Failed",
            cpuPremTime if cpuPremTime !=0 else "Failed",
            str(results['orig3'][i]['n']) +"/" + str(results['orig3'][i]['total']),
            str(results['preemption3'][i]['n']) +"/" + str(results['preemption3'][i]['total'])
            ))
            if cpuOrigTime:
                cpuOrig.append(cpuOrigTime)
            if cpuPremTime:
                cpuPrem.append(cpuPremTime)
        output('\n')
        origStDev=round(statistics.stdev(cpuOrig),4) if len(cpuOrig)>1 else "-"
        PremStDev=round(statistics.stdev(cpuPrem),4) if len(cpuPrem)>1 else "-"
        output('Standard Deviation- Orig - ',origStDev)
        output('Standard Deviation- Preemtion - ',PremStDev)
        origMean=round(statistics.mean(cpuOrig),4) if len(cpuOrig)>0 else "-"
        PremMean=round(statistics.mean(cpuPrem),4) if len(cpuPrem)>0 else "-"
        output('Standard Deviation- Orig - ',origStDev)
        output('Standard Deviation- Preemtion - ',PremStDev)
        output('Mean- Orig - ',origMean)
        output('Mean- Preemtion - ',PremMean)


    def runPerformanceTestsVaryingD():
        acceptors={}
        proposers={}
        learners={}
        for codePath in codePaths:
            c=str(codePath.__name__)
            results[c]={}
            #output("====================================================================================")
            #output("=============================",str(codePath.__name__),"===============================")
            #output("==================================================================================")
            acceptors[c]={}
            proposers[c]={}
            learners[c]={}
            dVals=[1,2,3,4,5]
            for dVary in dVals:
                tp=int(dVary*15)
                tl=int(dVary*15)
                results[c][dVary]={"execTime":0,"cpuTime":0,"n":0,"total":n}
                for run in range(n):
                    acceptors[c][run]=[]
                    proposers[c][run]=[]
                    learners[c][run]=[]
                    output("**********************************************************************************")
                    output("******************************",str(codePath.__name__)," Run: ",run+1,"************************************")
                    output("**********************************************************************************")
                    startTime=time.time()
                    startCPUTime=time.process_time()
                    acceptors[c][run] = new(codePath.Acceptor, num= a)
                    proposers[c][run] = new(codePath.Proposer, (acceptors[c][run],r,tp,w,dVary), num= p)
                    learners[c][run] = new(codePath.Learner, (acceptors[c][run],r,tl,dVary), num= l)

                    for p in acceptors[c][run]: setup(p, (learners[c][run],r,dVary))

                    start(acceptors[c][run] | proposers[c][run] | learners[c][run])
                    hasLearned=None
                    if await(each(learner in learners[c][run], has=received(('Learned', learner,True), from_=learner))):
                        hasLearned=True
                    elif(each(learner in learners[c][run], has=received(('Learned', learner,False), from_=learner))):
                        hasLearned=False
                    elif timeout(tl):
                        hasLearned=False
                    send( ('Done',), to= (acceptors[c][run]  | proposers[c][run])  )
                    if hasLearned:
                        results[c][dVary]["execTime"]+= (time.time() - startTime)
                        results[c][dVary]["cpuTime"]+= (time.process_time() - startCPUTime)
                        results[c][dVary]["n"]+=1
        print("results r varying: ",results)
        formatResults(results,"Varying d")

    def runPerformanceTestsVaryingW():
        acceptors={}
        proposers={}
        learners={}
        for codePath in codePaths:
            c=str(codePath.__name__)
            results[c]={}
            #output("====================================================================================")
            #output("=============================",str(codePath.__name__),"===============================")
            #output("==================================================================================")
            acceptors[c]={}
            proposers[c]={}
            learners[c]={}
            wVals=[1,2,3,4,5]
            for wVary in wVals:
                tp=int(wVary*15)
                tl=int(wVary*15)
                results[c][wVary]={"execTime":0,"cpuTime":0,"n":0,"total":n}
                for run in range(n):
                    acceptors[c][run]=[]
                    proposers[c][run]=[]
                    learners[c][run]=[]
                    output("**********************************************************************************")
                    output("******************************",str(codePath.__name__)," Run: ",run+1,"************************************")
                    output("**********************************************************************************")
                    startTime=time.time()
                    startCPUTime=time.process_time()
                    acceptors[c][run] = new(codePath.Acceptor, num= a)
                    proposers[c][run] = new(codePath.Proposer, (acceptors[c][run],r,tp,wVary,d), num= p)
                    learners[c][run] = new(codePath.Learner, (acceptors[c][run],r,tl,d), num= l)

                    for p in acceptors[c][run]: setup(p, (learners[c][run],r,d))

                    start(acceptors[c][run] | proposers[c][run] | learners[c][run])
                    hasLearned=None
                    if await(each(learner in learners[c][run], has=received(('Learned', learner,True), from_=learner))):
                        hasLearned=True
                    elif(each(learner in learners[c][run], has=received(('Learned', learner,False), from_=learner))):
                        hasLearned=False
                    elif timeout(tl):
                        hasLearned=False
                    send( ('Done',), to= (acceptors[c][run]  | proposers[c][run])  )
                    if hasLearned:
                        results[c][wVary]["execTime"]+= (time.time() - startTime)
                        results[c][wVary]["cpuTime"]+= (time.process_time() - startCPUTime)
                        results[c][wVary]["n"]+=1
        print("results r varying: ",results)
        formatResults(results,"Varying w")

    def runPerformanceTestsVaryingR():
        acceptors={}
        proposers={}
        learners={}
        for codePath in codePaths:
            c=str(codePath.__name__)
            results[c]={}
            #output("====================================================================================")
            #output("=============================",str(codePath.__name__),"===============================")
            #output("==================================================================================")
            acceptors[c]={}
            proposers[c]={}
            learners[c]={}
            rVals=[0.0,0.1,0.2,0.3,0.4,0.5,0.6]
            #rVals=[0.0]
            for rVary in rVals:
                results[c][rVary]={"execTime":0,"cpuTime":0,"n":0,"total":n}
                for run in range(n):
                    acceptors[c][run]=[]
                    proposers[c][run]=[]
                    learners[c][run]=[]
                    output("**********************************************************************************")
                    output("******************************",str(codePath.__name__)," Run: ",run+1,"************************************")
                    output("**********************************************************************************")
                    startTime=time.time()
                    startCPUTime=time.process_time()
                    acceptors[c][run] = new(codePath.Acceptor, num= a)
                    proposers[c][run] = new(codePath.Proposer, (acceptors[c][run],rVary,tp,w,d), num= p)
                    learners[c][run] = new(codePath.Learner, (acceptors[c][run],rVary,tl,d), num= l)

                    for p in acceptors[c][run]: setup(p, (learners[c][run],rVary,d))

                    start(acceptors[c][run] | proposers[c][run] | learners[c][run])
                    hasLearned=None
                    if await(each(learner in learners[c][run], has=received(('Learned', learner,True), from_=learner))):
                        hasLearned=True
                    elif(each(learner in learners[c][run], has=received(('Learned', learner,False), from_=learner))):
                        hasLearned=False
                    elif timeout(tl):
                        hasLearned=False
                    send( ('Done',), to= (acceptors[c][run]  | proposers[c][run])  )
                    if hasLearned:
                        results[c][rVary]["execTime"]+= (time.time() - startTime)
                        results[c][rVary]["cpuTime"]+= (time.process_time() - startCPUTime)
                        results[c][rVary]["n"]+=1
        print("results r varying: ",results)
        formatResults(results,"Varying r")


    def run():
        #runPerformanceTestsVaryingR()
        runPerformanceTestsVaryingW()
        #runPerformanceTestsVaryingD()
        #runPerformanceTests()
        output('terminating')
        send(('done', self), to= parent())
        output("Sending done to parent")
        await(received(('done'), from_=parent()))


def main():
    p = int(sys.argv[1]) if len(sys.argv) > 1 else 10           # num of proposers
    a = int(sys.argv[2]) if len(sys.argv) > 2 else 10           # num of acceptors
    l = int(sys.argv[3]) if len(sys.argv) > 3 else 10           # num of learners
    n = int(sys.argv[4]) if len(sys.argv) > 4 else 1            # num of runs
    r = float(sys.argv[5]) if len(sys.argv) > 5 else 0.0        # message loss rate
    d = int(sys.argv[6]) if len(sys.argv) > 6 else 1            # message delay
    w = int(sys.argv[7]) if len(sys.argv) > 7 else 1            # wait time
    tp = int(sys.argv[8]) if len(sys.argv) > 8 else 1           # timeout by proposers
    tl = int(sys.argv[9]) if len(sys.argv) > 9 else 1           # timeout by learners
    driver = new(Driver, num=1)
    setup(driver,(p,a,l,n,r,d,w,tp,tl))
    start(driver)
    await(each(e in driver, has=received(('done', e))))

    send(('done'), to=driver)