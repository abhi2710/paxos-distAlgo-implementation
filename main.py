# -*- generated by 1.1.0b12 -*-
import da
PatternExpr_316 = da.pat.ConstantPattern('done')
PatternExpr_320 = da.pat.BoundPattern('_BoundPattern322_')
PatternExpr_323 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern329_')]), da.pat.ConstantPattern('done')])
PatternExpr_508 = da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern511_')])
PatternExpr_514 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern524_')])])
_config_object = {'channel': 'fifo', 'clock': 'lamport'}
import sys
import random
import time
import orig3
import preemption3
codePaths = [orig3, preemption3]

class Driver(da.DistProcess):

    def __init__(self, procimpl, forwarder, **props):
        super().__init__(procimpl, forwarder, **props)
        self._DriverReceivedEvent_0 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_DriverReceivedEvent_0', PatternExpr_316, sources=[PatternExpr_320], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, p, a, l, n, r, d, w, tp, tl, **rest_529):
        super().setup(p=p, a=a, l=l, n=n, r=r, d=d, w=w, tp=tp, tl=tl, **rest_529)
        self._state.p = p
        self._state.a = a
        self._state.l = l
        self._state.n = n
        self._state.r = r
        self._state.d = d
        self._state.w = w
        self._state.tp = tp
        self._state.tl = tl
        self._state.p = self._state.p
        self._state.a = self._state.a
        self._state.l = self._state.l
        self._state.n = self._state.n
        self._state.r = self._state.r
        self._state.d = self._state.d
        self._state.w = self._state.w
        self._state.tp = self._state.tp
        self._state.tl = self._state.tl

    def run(self):
        self.runPerformanceTests()
        self.output('terminating')
        self.send(('done', self._id), to=self.parent())
        super()._label('_st_label_313', block=False)
        _st_label_313 = 0
        while (_st_label_313 == 0):
            _st_label_313 += 1
            if PatternExpr_323.match_iter(self._DriverReceivedEvent_0, _BoundPattern329_=self.parent(), SELF_ID=self._id):
                _st_label_313 += 1
            else:
                super()._label('_st_label_313', block=True)
                _st_label_313 -= 1

    def runPerformanceTests(self):
        for codePath in codePaths:
            for run in range(self._state.n):
                acceptors = self.new(codePath.Acceptor, self._state.r, num=self._state.a)
                proposers = self.new(codePath.Proposer, (acceptors, self._state.r, self._state.tp), num=self._state.p)
                learners = self.new(codePath.Learner, (acceptors, self._state.r, self._state.tl), num=self._state.l)
                for self._state.p in acceptors:
                    self._setup(self._state.p, (learners,))
                self._start(((acceptors | proposers) | learners))

class Node_(da.NodeProcess):

    def __init__(self, procimpl, forwarder, **props):
        super().__init__(procimpl, forwarder, **props)
        self._Node_ReceivedEvent_0 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_Node_ReceivedEvent_0', PatternExpr_508, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[])])

    def run(self):
        p = (int(sys.argv[1]) if (len(sys.argv) > 1) else 10)
        a = (int(sys.argv[2]) if (len(sys.argv) > 2) else 10)
        l = (int(sys.argv[3]) if (len(sys.argv) > 3) else 10)
        n = (int(sys.argv[4]) if (len(sys.argv) > 4) else 1)
        r = (int(sys.argv[5]) if (len(sys.argv) > 5) else 0)
        d = (int(sys.argv[6]) if (len(sys.argv) > 6) else 1)
        w = (int(sys.argv[7]) if (len(sys.argv) > 7) else 1)
        tp = (int(sys.argv[8]) if (len(sys.argv) > 8) else 1)
        tl = (int(sys.argv[9]) if (len(sys.argv) > 9) else 1)
        driver = self.new(Driver, num=1)
        self._setup(driver, (p, a, l, n, r, d, w, tp, tl))
        self._start(driver)
        super()._label('_st_label_505', block=False)
        _st_label_505 = 0
        while (_st_label_505 == 0):
            _st_label_505 += 1
            if PatternExpr_514.match_iter(self._Node_ReceivedEvent_0, _BoundPattern524_=driver):
                _st_label_505 += 1
            else:
                super()._label('_st_label_505', block=True)
                _st_label_505 -= 1
        self.send('done', to=driver)
