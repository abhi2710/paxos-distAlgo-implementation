import sys
import time
from random import randint
import random

class Proposer(process):
    def setup(acceptors:set,r:float,tp:int,w:int,d:int):
        self.n = None              # proposal number
        self.majority = acceptors  # majority of acceptors; all in other papers


    def to_consent():
        n = (0, self) if n == None else (n[0]+1, self)  # pick a prop num
        sendMsg(('prepare', n), majority)

        if await(len(setof(a, received(('respond', _n, _), from_ =a)))
                 > len(acceptors)/2):
            v = anyof(setof(v, received(('respond', _n, (n2, v))),
                            n2==max(setof(n2, received(('respond', _n, (n2, _))))))
                      or {randint(1,100)})  # any value, pick in 1..100
            responded = setof(a, received(('respond', _n, _), from_ =a))
            sendMsg(('accept', n, v), responded)

        elif timeout(tp):
            #output('failed proposal number', n)
            pass


    def run():
        while not received(('Done',)):
            to_consent()
            time.sleep(w)
        #output("abhinav----")
        #output('terminating')

    def anyof(s):
        return next(iter(s)) if s else None

    def calcProbMsgLoss():
        prob = random.uniform(0.0, 1.0)
        #output("Inside msg loss ", prob)
        if prob < r:
            return True
        else:
            return False

    def sendMsg(msg, recipients):
        for to in recipients:
            if not calcProbMsgLoss():
                #output("MSGLOSS: Sending", msg, "to", to)
                time.sleep(d)
                send(msg, to= to)
            else:
                #output("MSGLOSS: Not sending", msg, "to", to)
                pass

class Acceptor(process):
    def setup(learners:set,r:float,d:int): pass

    def receive(msg= ('prepare', n), from_= p):
        if each(sent(('respond', n2, _)), has= n > n2):
            maxprop = anyof(setof((n, v), sent(('accepted', n, v)),
                               n==max(setof(n, sent(('accepted', n, _))))))
            recipients=[p]
            sendMsg(('respond', n, maxprop), recipients)

    def receive(msg= ('accept', n, v)):
        if not some(sent(('respond', n2, _)), has= n2 > n):
            sendMsg(('accepted', n, v), learners)

    def run():
        await(received(('Done',)))
        #output("djjdjd")
        #output('terminating')

    def anyof(s):
        """return any element of set s if s is not empty or 'None' otherwise"""
        return next(iter(s)) if s else None


    def calcProbMsgLoss():
        prob = random.uniform(0.0, 1.0)
        #output("Inside msg loss ", prob)
        if prob < r:
            return True
        else:
            return False

    def sendMsg(msg, recipients):
        for to in recipients:
            if not calcProbMsgLoss():
                #output("MSGLOSS: Sending", msg, "to", to)
                time.sleep(d)
                send(msg, to= to)
            else:
                #output("MSGLOSS: Not sending", msg, "to", to)
                pass



class Learner(process):
    def setup(acceptors:set,r:float,tl:int,d:int): pass

    def learn():
        if await(some(received(('accepted', n, v)),
                      has= len(setof(a, received(('accepted', _n, _v), from_=a)))
                           > len(acceptors)/2)):
            pass
            #output('learned', n, v)

        elif timeout(tl):
            #output('failed learning anything')
            pass

    def calcProbMsgLoss():
        prob = random.uniform(0.0, 1.0)
        #output("Inside msg loss ", prob)
        if prob < r:
            return True
        else:
            return False

    def sendMsg(msg, recipients):
        for to in recipients:
            if not calcProbMsgLoss():
                #output("MSGLOSS: Sending", msg, "to", to)
                time.sleep(d)
                send(msg, to= to)
            else:
                #output("MSGLOSS: Not sending", msg, "to", to)
                pass

    def run():
        learn()
        #output('terminating')
        #send(('Done', ), to=nodeof(self))
        send(('Learned',self), to=parent())


def main():
    nacceptors = int(sys.argv[1]) if len(sys.argv) > 1 else 3
    nproposers = int(sys.argv[2]) if len(sys.argv) > 2 else 5
    nlearners = int(sys.argv[3]) if len(sys.argv) > 3 else 3
    r=0
    tp=TIMEOUT
    tl=TIMEOUT

    acceptors = new(Acceptor, num= nacceptors)
    proposers = new(Proposer, (acceptors,r,tp), num= nproposers)
    learners = new(Learner, (acceptors,r,tl), num= nlearners)
    for p in acceptors: setup(p, (learners,r))
    start(acceptors | proposers | learners)

    await(each(l in learners, has=received(('Learned',), from_=l)))
    output('done')
    send(('Done',), to= (acceptors|proposers))

# This is an executable specification of the algorithm described in
# Lamport, L. (2001).  Paxos Made Simple.  ACM SIGACT News
# (Distributed Computing Column), 32(4):51-58, December.

# This code includes setup and termination for running repeated rounds until
# the learners all terminate after learning the consent value or timeout.
